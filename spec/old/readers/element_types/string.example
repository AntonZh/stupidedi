require "spec_helper"

describe Stupidedi::FiftyTen::Definitions::ElementTypes::AN do
  describe "#reader" do
    include QuickCheck::SerializedEdi::Macro

    let(:values) { Stupidedi::Values }
    let(:isa)    { Stupidedi::Interchange::FiveOhOne::InterchangeHeader }

    let(:an) do
      Stupidedi::FiftyTen::Definitions::ElementTypes::AN.new \
        "AN", "Free Text", "Purpose", 1, 1
    end

    it "parses trailing spaces" do
      an.reader("FOO BAR   *...", isa.default).read.map do |result|
        result.value.should == "FOO BAR"
        result.value.element_def.should == an
        result.remainder.input.should == "*..."
      end.should be_defined
    end

    it "parses leading spaces" do
      an.reader("   FOO BAR*...", isa.default).read.map do |result|
        result.value.should == "   FOO BAR"
      end.should be_defined
    end

    it "parses basic character set" do
      delims = QuickCheck::SerializedEdi.value { current.delimiters.values }
      string = Stupidedi::Reader.basic_characters.
                 reject{|x| delims.include?(x) }.join

      an.reader("#{string}*...", isa.default).read.map do |result|
        result.value.should == string
      end.should be_defined
    end

    it "parses extended character set" do
      delims = QuickCheck::SerializedEdi.value { current.delimiters.values }
      string = Stupidedi::Reader.extended_characters.
                 reject{|x| delims.include?(x) }.join

      an.reader("#{string}*...", isa.default).read.map do |result|
        result.value.should == string
      end.should be_defined
    end

    it "ignores control characters" do
      string = Stupidedi::Reader.control_characters.join

      an.reader("#{string}*...", isa.default).read.map do |result|
        result.value.should == values::StringVal.empty
      end.should be_defined
    end

    it "parses empty" do
      an.reader("~...", isa.default).read.map do |result|
        result.value.should be_empty
        result.value.should == values::StringVal.empty
        result.remainder.input.should == "~..."
      end.should be_defined
    end

    it "parses empty", :random => true do
      property do
        with(document.delimiters) do
          [ stream.agitate(stream.space(between(0, 16))),
            char.delimiter,
            stream.string,
            current.isa ]
        end
      end.check do |space, delim, rest, isa|
        an.reader("#{space}#{delim}#{rest}", isa).read.map do |result|
          result.value.should be_empty
          result.value.should == values::StringVal.empty
          result.remainder.input.should == "#{delim}#{rest}"
        end.should be_defined
      end
    end

    it "parses non-empty input", :random => true do
      property do
        with(document.delimiters) do
          [ stream.pad(element.an),
            char.delimiter,
            stream.string,
            current.isa ].
          try{|xs| stream.agitate(xs.head).cons(xs) }
        end
      end.check do |agitated, data, delim, rest, isa|
        an.reader("#{agitated}#{delim}#{rest}", isa).read.map do |result|
          result.value.should == data.rstrip
          result.remainder.input.should == "#{delim}#{rest}"
        end.should be_defined
      end
    end

  end
end
