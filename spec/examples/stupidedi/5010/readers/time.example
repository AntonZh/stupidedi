require "spec_helper"

describe Stupidedi::FiftyTen::Definitions::ElementDef do
  include QuickCheck::SerializedEdi::Macro

  let(:elements)   { Stupidedi::FiftyTen::Definitions::ElementTypes }
  let(:values)     { Stupidedi::Values }

  let(:tm) { elements::TM.new("TM", "Time", "Purpose", 4, 6) }

  describe "#reader" do
    let(:isa) { Stupidedi::Interchange::FiveOhOne::InterchangeHeader }

    context "SimpleElementDef" do
      context "time TM" do
        it "parses HH" do
          tm.reader("12*...", isa.default).read.map do |result|
            result.value.hour.should   == "12"
            result.value.minute.should be_nil
            result.value.second.should be_nil
            result.value.element_def.should == tm
            result.remainder.input.should == "*..."
          end.should be_defined
        end

        it "parses HHMM" do
          tm.reader("1230*...", isa.default).read.map do |result|
            result.value.hour.should   == "12"
            result.value.minute.should == "30"
            result.value.second.should be_nil
          end.should be_defined
        end

        it "parses HHMMSS" do
          tm.reader("123015*...", isa.default).read.map do |result|
            result.value.hour.should   == "12"
            result.value.minute.should == "30"
            result.value.second.should == "15"
          end.should be_defined
        end

        it "parses HHMMSSd..d" do
          tm.reader("1245309999*...", isa.default).read.map do |result|
            result.value.hour.should   == "12"
            result.value.minute.should == "45"
            result.value.second.should == "309999"
          end.should be_defined
        end

        it "parses empty" do
          tm.reader("~...", isa.default).read.map do |result|
            result.value.should be_empty
            result.value.should == values::TimeVal.empty
            result.remainder.input.should == "~..."
          end.should be_defined
        end

        it "parses empty", :random => true do
          property do
            with(document.delimiters) do
              [stream.agitate(stream.space(between(0, 16))), char.delimiter, stream.string, current.isa]
            end
          end.check do |space, delim, rest, isa|
            tm.reader("#{space}#{delim}#{rest}", isa).read.map do |result|
              result.value.should be_empty
              result.value.should == values::TimeVal.empty
              result.remainder.input.should == "#{delim}#{rest}"
            end.should be_defined
          end
        end

        it "parses non-empty input with two digits", :random => true do
          property do
            with(document.delimiters) do
              [stream.pad(with(:size, 2) { element.tm }), char.delimiter, stream.string, current.isa].
                try{|xs| stream.agitate(xs.head).cons(xs) }
            end
          end.check do |agitated, data, delim, rest, isa|
            tm.reader("#{agitated}#{delim}#{rest}", isa).read.map do |result|
              data = data.strip
              result.value.hour.should    == data
              result.value.minute.should  == nil
              result.value.second.should  == nil
              result.remainder.input.should == "#{delim}#{rest}"
            end.should be_defined
          end
        end

        it "parses non-empty input with four digits", :random => true do
          property do
            with(document.delimiters) do
              [stream.pad(with(:size, 4) { element.tm }), char.delimiter, stream.string, current.isa].
                try{|xs| stream.agitate(xs.head).cons(xs) }
            end
          end.check do |agitated, data, delim, rest, isa|
            tm.reader("#{agitated}#{delim}#{rest}", isa).read.map do |result|
              data = data.strip
              result.value.hour.should    == data.slice(0, 2)
              result.value.minute.should  == data.slice(2, 2)
              result.value.second.should  == nil
              result.remainder.input.should == "#{delim}#{rest}"
            end.should be_defined
          end
        end

        it "parses non-empty input with six digits", :random => true do
          property do
            with(document.delimiters) do
              [stream.pad(with(:size, 6) { element.tm }), char.delimiter, stream.string, current.isa].
                try{|xs| stream.agitate(xs.head).cons(xs) }
            end
          end.check do |agitated, data, delim, rest, isa|
            tm.reader("#{agitated}#{delim}#{rest}", isa).read.map do |result|
              data = data.strip
              result.value.hour.should    == data.slice(0, 2)
              result.value.minute.should  == data.slice(2, 2)
              result.value.second.should  == data.slice(4, 2)
              result.remainder.input.should == "#{delim}#{rest}"
            end.should be_defined
          end
        end

        it "parses non-empty input with more than six digits", :random => true do
          property do
            with(document.delimiters) do
              [stream.pad(with(:size, between(7, 14)) { element.tm }), char.delimiter, stream.string, current.isa].
                try{|xs| stream.agitate(xs.head).cons(xs) }
            end
          end.check do |agitated, data, delim, rest, isa|
            tm.reader("#{agitated}#{delim}#{rest}", isa).read.map do |result|
              data = data.strip
              result.value.hour.should    == data.slice(0, 2)
              result.value.minute.should  == data.slice(2, 2)
              result.value.second.should  == data.slice(4..-1)
              result.remainder.input.should == "#{delim}#{rest}"
            end.should be_defined
          end
        end
      end

      context "time TM validation" do
        it "requires two-digit hour" do
          tm.reader("2*", isa.default).read.should_not be_defined
        end

        it "requires two-digit minute" do
          tm.reader("123*", isa.default).read.should_not be_defined
        end

        it "requires two-digit second" do
          tm.reader("12305*", isa.default).read.should_not be_defined
        end

        it "validates hour is from 00 to 24" do
          tm.reader("25*", isa.default).read.should_not be_defined
        end

        it "validates minute is from 00 to 60" do
          tm.reader("1261*", isa.default).read.should_not be_defined
        end

        it "validates second is from 00 to 60" do
          tm.reader("12306099*", isa.default).read.should_not be_defined
        end

        it "produces an error message" do
          tm.reader("12306099*", isa.default).read.explanation.should ==
            %[Not a valid time '12:30:6099' from input "12306099"]
        end

        it "encodes the error position"
      end

    end
  end
end
