require "spec_helper"

describe Stupidedi::FiftyTen::Definitions::ElementDef do
  include QuickCheck::SerializedEdi::Macro

  let(:elements)   { Stupidedi::FiftyTen::Definitions::ElementTypes }
  let(:values)     { Stupidedi::Values }

  let(:id) { elements::ID.new("ID", "Qualifier", "Purpose", 1, 1) }

  describe "#reader" do
    let(:isa) { Stupidedi::Interchange::FiveOhOne::InterchangeHeader }

    context "SimpleElementDef" do
      context "identifier ID" do
        it "parses trailing spaces" do
          id.reader("AB   *...", isa.default).read.map do |result|
            result.value.should == "AB"
            result.value.element_def.should == id
            result.remainder.input.should == "*..."
          end.should be_defined
        end

        it "parses leading spaces" do
          id.reader("   AB*...", isa.default).read.map do |result|
            result.value.should == "   AB"
          end.should be_defined
        end

        it "parses empty" do
          id.reader("~...", isa.default).read.map do |result|
            result.value.should be_empty
            result.value.should == values::IdentifierVal.empty
            result.remainder.input.should == "~..."
          end.should be_defined
        end

        it "parses empty", :random => true do
          property do
            with(document.delimiters) do
              [stream.agitate(stream.space(between(0, 16))), char.delimiter, stream.string, current.isa]
            end
          end.check do |space, delim, rest, isa|
            id.reader("#{space}#{delim}#{rest}", isa).read.map do |result|
              result.value.should be_empty
              result.value.should == values::IdentifierVal.empty
              result.remainder.input.should == "#{delim}#{rest}"
            end.should be_defined
          end
        end

        it "parses non-empty input", :random => true do
          property do
            with(document.delimiters) do
              [stream.pad(element.id), char.delimiter, stream.string, current.isa].
                try{|xs| stream.agitate(xs.head).cons(xs) }
            end
          end.check do |agitated, data, delim, rest, isa|
            id.reader("#{agitated}#{delim}#{rest}", isa).read.map do |result|
              result.value.should == data.rstrip
              result.remainder.input.should == "#{delim}#{rest}"
            end.should be_defined
          end
        end
      end

    end
  end
end
