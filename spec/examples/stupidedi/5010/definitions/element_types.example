require "spec_helper"

describe Stupidedi::FiftyTen::Definitions::ElementTypes do
  include QuickCheck::SerializedEdi::Macro

  let(:elements)   { Stupidedi::FiftyTen::Definitions::ElementTypes }
  let(:dictionary) { Stupidedi::FiftyTen::Dictionaries::ElementDictionary }
  let(:values)     { Stupidedi::Values }

  let(:r)  { elements::R .new("R" , "Decimal Thing",  "Purpose", 1, 1) }
  let(:n0) { elements::N0.new("N0", "Whole Number",   "Purpose", 1, 1) }
  let(:n1) { elements::N1.new("N1", "Tenths Place",   "Purpose", 1, 1) }
  let(:n2) { elements::N2.new("N2", "Money",          "Purpose", 1, 1) }
  let(:n3) { elements::N3.new("N3", "N.nnn",          "Purpose", 1, 1) }
  let(:n4) { elements::N4.new("N4", "N.nnnn",         "Purpose", 1, 1) }
  let(:n5) { elements::N5.new("N5", "N.nnnnn",        "Purpose", 1, 1) }
  let(:n6) { elements::N6.new("N6", "N.nnnnnn",       "Purpose", 1, 1) }
  let(:n7) { elements::N7.new("N7", "N.nnnnnnn",      "Purpose", 1, 1) }
  let(:n8) { elements::N8.new("N8", "N.nnnnnnnnn",    "Purpose", 1, 1) }
  let(:n9) { elements::N9.new("N9", "N.nnnnnnnnnn",   "Purpose", 1, 1) }
  let(:id) { elements::ID.new("ID", "Qualifier",      "Purpose", 1, 1) }
  let(:an) { elements::AN.new("AN", "Free Text",      "Purpose", 1, 1) }
  let(:dt) { elements::DT.new("DT", "Date",           "Purpose", 8, 8) }
  let(:tm) { elements::TM.new("TM", "Time",           "Purpose", 4, 6) }

  describe "#empty" do
    context "decimal R" do
      subject { r.empty }
      it { should be_empty }
      it { should == values::NumericVal.empty }
      specify { subject.element_def == r }
    end

    context "numeric N0" do
      subject { n0.empty }
      it { should be_empty }
      it { should == values::NumericVal.empty }
      specify { subject.element_def == n0  }
    end

    # Cheating here to avoid boilerplate
    context "numeric Nn" do
      %w(n1 n2 n3 n4 n5 n6 n7 n8 n9).each do |nn|
        specify { send(nn).empty.should be_empty }
        specify { send(nn).empty.should == values::NumericVal.empty }
        specify { send(nn).empty.element_def == send(nn) }
      end
    end

    context "identifier ID" do
      subject { id.empty }
      it { should be_empty }
      it { should == values::IdentifierVal.empty }
      specify { subject.element_def == id }
    end

    context "string AN" do
      subject { an.empty }
      it { should be_empty }
      it { should == values::StringVal.empty }
      specify { subject.element_def == an }
    end

    context "date DT" do
      subject { dt.empty }
      it { should be_empty }
      it { should == values::DateVal.empty }
      specify { subject.element_def == dt }
    end

    context "time TM" do
      subject { tm.empty }
      it { should be_empty }
      it { should == values::TimeVal.empty }
      specify { subject.element_def == tm }
    end
  end
end

