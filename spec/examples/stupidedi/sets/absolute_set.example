# encoding: UTF-8

require "spec_helper"

describe Stupidedi::Sets::AbsoluteSet do

  before do
    @items  = %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)
    @full   = Stupidedi::Sets.absolute(@items)

    @single = @full.copy(:mask => 0b00000000000000000000000001)
    @subset = @full.copy(:mask => 0b10101010101010101010101010)
    @empty  = @full.copy(:mask => 0b00000000000000000000000000)
  end

  describe "#to_a" do
  end

  describe "#map(&block)" do
    specify "A.map{|a| a } = A" do
      @full.map{|a| a }.should == @full
      @empty.map{|a| a }.should == @empty
      @single.map{|a| a }.should == @single
      @subset.map{|a| a }.should == @subset
    end

    specify "A.map{|a| b } = ∅, given b ∉ U" do
      @full.map{|a| "A" }.should == @empty
      @empty.map{|a| "A" }.should == @empty
      @single.map{|a| "A" }.should == @empty
      @subset.map{|a| "A" }.should == @empty
    end

    specify "A.map{|a| b } = {b}, given b ∈ U" do
      @full.map{|a| "z" }.to_a.should == %w(z)
      @single.map{|a| "a" }.to_a.should == %w(a)
      @single.map{|a| "a" }.to_a.should == %w(a)
      @subset.map{|a| "b" }.to_a.should == %w(b)
    end
  end

  describe "#select(&block)" do
    specify "A.select{|a| true } = A" do
      @full.select{|a| true }.should == @full
      @empty.select{|a| true }.should == @empty
      @single.select{|a| true }.should == @single
      @subset.select{|a| true }.should == @subset
    end

    specify "A.select{|a| false } = ∅" do
      @full.select{|a| false }.should be_empty
      @empty.select{|a| false }.should be_empty
      @single.select{|a| false }.should be_empty
      @subset.select{|a| false }.should be_empty
    end

    specify "A.select{|a| a == b } = {b}, given b ∈ U" do
      @full.select{|a| a == "a" }.to_a.should == %w(a)
      @single.select{|a| a == "a" }.to_a.should == %w(a)
      @subset.select{|a| a == "b" }.to_a.should == %w(b)
    end
  end

  describe "#include?(element)" do
    specify "x ∉ ∅, for all x" do
      @empty.include?("a").should be_false
      @empty.include?("A").should be_false
    end

    specify "x ∉ A, for all x ∉ U" do
      @full.include?("A").should be_false
      @single.include?("A").should be_false
      @subset.include?("A").should be_false
    end

    specify "a ∈ {a}, for all x" do
      @single.include?("a").should be_true
    end

    specify "a ∈ A, for all {a} ⊆ A"
  end

  describe "#finite?" do
    it "is true" do
      @full.should be_finite
      @empty.should be_finite
      @single.should be_finite
      @subset.should be_finite
    end
  end

  describe "#empty?" do
    specify "∅.empty? is true" do
      @empty.should be_empty
    end

    specify "{a}.empty? is false" do
      @single.should_not be_empty
    end
  end

  describe "#size" do
    specify "∅.size == 0" do
      @empty.size == 0
    end

    specify "{a}.size == 1" do
      @single.size.should == 1
    end
  end

  describe "#complement" do
    specify "A ∩ ¬A = ∅" do
      (@full & ~@full).should == @empty
      (@empty & ~@empty).should == @empty
      (@single & ~@single).should == @empty
      (@subset & ~@subset).should == @empty
    end

    specify "A ∪ ¬A = U" do
      (@full | ~@full).should == @full
      (@empty | ~@empty).should == @full
      (@single | ~@single).should == @full
      (@subset | ~@subset).should == @full
    end

    # @todo: check this property
    specify "A ⊖ ¬A = A" do
    # (@full ^ ~@full).should == @full
    # (@empty ^ ~@empty).should == @empty
    # (@single ^ ~@single).should == @single
    # (@subset ^ ~@subset).should == @subset
    end

    specify "A ∖ ¬A = A" do
      (@full - ~@full).should == @full
      (@empty - ~@empty).should == @empty
      (@single - ~@single).should == @single
      (@subset - ~@subset).should == @subset
    end

    # x ∉ ¬A, for all x ∉ U
    # x ∈ ¬A, for all x ∈ U and x ∉ A
    # x ∉ ¬A, for all x ∈ U and x ∈ A

    specify "¬U = ∅" do
      (~@full).should == @empty
    end

    specify "¬∅ = U" do
      (~@empty).should == @full
    end

    # Identity
    specify "¬(¬A) = A" do
      (~(~@full)).should == @full
      (~(~@empty)).should == @empty
      (~(~@single)).should == @single
      (~(~@subset)).should == @subset
    end

    # De Morgan's Laws
    # ¬(A ∪ B) = ¬A ∩ ¬B
    # ¬(A ∩ B) = ¬A ∪ ¬B

    # Uniqueness of Complements
    # B = ¬A, given A ∪ B = U and A ∩ B = ∅
  end

  describe "#union(other)" do
    # x ∈ A ∪ B, for all x ∈ A
    # x ∈ A ∪ B, for all x ∈ B
    # x ∉ A ∪ B, for all x ∉ A and x ∉ B

    # A ∪ B = B, given B ⊂ A
    # A ∪ B = A, given B ⊃ A
    # A ∪ B ⊇ A
    # A ∪ B ⊇ B
    # A ∪ B ⊃ A, given A ∩ B = ∅

    # Absorption
    # A ∪ (A ∩ B) = A

    # Idempotent
    specify "A ∪ A = A" do
      (@full + @full).should == @full
      (@empty + @empty).should == @empty
      (@single + @single).should == @single
      (@subset + @subset).should == @subset
    end

    # Domination
    specify "A ∪ U = U" do
      (@full + @full).should == @full
      (@empty + @full).should == @full
      (@single + @full).should == @full
      (@subset + @full).should == @full
    end

    # Complement
    specify "A ∪ ¬A = U" do
      (@full | ~@full).should == @full
      (@empty | ~@empty).should == @full
      (@single | ~@single).should == @full
      (@subset | ~@subset).should == @full
    end

    # Identity
    specify "A ∪ ∅ = A" do
      (@full + @empty).should == @full
      (@empty + @empty).should == @empty
      (@single + @empty).should == @single
      (@subset + @empty).should == @subset
    end

    # Distributive
    # A ∪ (B ∩ C) = (A ∪ B) ∩ (A ∪ C)

    # Commutative
    # A ∪ B = B ∪ A

    # Associative
    # (A ∪ B) ∪ C = A ∪ (B ∪ C)
  end

  describe "#intersection(other)" do
    # x ∈ A ∩ B, for all x ∈ A and x ∈ B
    # x ∉ A ∩ B, for all x ∉ A
    # x ∉ A ∩ B, for all x ∉ B

    specify "A ∩ U = A" do
      (@full & @full).should == @full
      (@empty & @full).should == @empty
      (@single & @full).should == @single
      (@subset & @full).should == @subset
    end

    # A ∩ B = B, given B ⊇ A
    # A ∩ B = A, given B ⊂= A

    # Absorption
    # A ∩ (A ∪ B) = A

    # Idempotent
    specify "A ∩ A = A" do
      (@full & @full).should == @full
      (@empty & @empty).should == @empty
      (@single & @single).should == @single
      (@subset & @subset).should == @subset
    end

    # Domination
    specify "A ∩ ∅ = ∅" do
      (@full & @empty).should == @empty
      (@empty & @empty).should == @empty
      (@single & @empty).should == @empty
      (@subset & @empty).should == @empty
    end

    # Complement
    specify "A ∩ ¬A = ∅" do
      (@full & ~@full).should == @empty
      (@empty & ~@empty).should == @empty
      (@single & ~@single).should == @empty
      (@subset & ~@subset).should == @empty
    end

    # Distributive
    # A ∩ (B ∪ C) = (A ∩ B) ∪ (A ∩ C)

    # Commutative
    # A ∩ B = B ∩ A

    # Associative
    # (A ∩ B) ∩ C = A ∩ (B ∩ C)
  end

  describe "#difference(other)" do
    # x ∈ A ∖ B, for all x ∈ A and x ∉ B
    # x ∉ A ∖ B, for all x ∉ A
    # x ∉ A ∖ B, for all x ∈ B

    specify "U ∖ A = ¬A" do
      (@full - @full).should == ~@full
      (@full - @empty).should == ~@empty
      (@full - @single).should == ~@single
      (@full - @subset).should == ~@subset
    end

    specify "∅ ∖ A = ∅" do
      (@empty - @full).should == @empty
      (@empty - @empty).should == @empty
      (@empty - @single).should == @empty
      (@empty - @subset).should == @empty
    end

    specify "A ∖ A = ∅" do
      (@full - @full).should == @empty
      (@empty - @empty).should == @empty
      (@single - @single).should == @empty
      (@subset - @subset).should == @empty
    end

    specify "A ∖ ∅ = A" do
      (@full - @empty).should == @full
      (@empty - @empty).should == @empty
      (@single - @empty).should == @single
      (@subset - @empty).should == @subset
    end

    specify "A ∖ U = ∅" do
      (@full - @full).should == @empty
      (@empty - @full).should == @empty
      (@single - @full).should == @empty
      (@subset - @full).should == @empty
    end

    # A ∖ B = A, given A ∩ B = ∅
    # A ∖ B ⊂ A, given A ∩ B ≠ ∅
    # A ∖ B ≠ B ∖ A, given A ≠ B

    # C ∖ (A ∩ B) = (C ∖ A) ∪ (C ∖ B)
    # C ∖ (A ∪ B) = (C ∖ A) ∩ (C ∖ B)
    # C ∖ (B ∖ A) = (A ∩ C) ∪ (C ∖ B)
    # (B ∖ A) ∩ C = (B ∩ C) ∖ A = B ∩ (C ∖ A)
    # (B ∖ A) ∪ C = (B ∪ C) ∖ (A ∖ C)

    # B ∖ A = ¬A ∩ B
    # ¬(B ∖ A) = A ∪ ¬B
  end

  describe "#symmetric_difference(other)" do
    specify "A ⊖ A = ∅" do
      (@full ^ @full).should == @empty
      (@empty ^ @empty).should == @empty
      (@single ^ @single).should == @empty
      (@subset ^ @subset).should == @empty
    end

    # @todo: check this property
    specify "A ⊖ U = ∅" do
    # (@full ^ @full).should == @empty
    # (@empty ^ @full).should == @empty
    # (@single ^ @full).should == @empty
    # (@subset ^ @full).should == @empty
    end

    specify "A ⊖ ∅ = A" do
      (@full ^ @empty).should == @full
      (@empty ^ @empty).should == @empty
      (@single ^ @empty).should == @single
      (@subset ^ @empty).should == @subset
    end

    # A ⊖ B = (A ∖ B) ∪ (B ∖ A)
    # A ⊖ B = (A ∪ B) ∖ (A ∩ B)
    # A ⊖ B = B ⊖ A
    # (A ⊖ B) ⊖ C = A ⊖ (B ⊖ C)
    # (A ⊖ B) ⊖ (B ⊖ C) = A ⊖ C
    # A ∩ (B ⊖ C) = (A ∩ B) ⊖ (A ∩ C)
  end

  describe "#subset?(other)" do
    # Reflexivity
    specify "A ⊆ A" do
      @full.should <= @full
      @empty.should <= @empty
      @single.should <= @single
      @subset.should <= @subset
    end

    # Antisymmetry
    # A ⊆ B and B ⊆ A, given A = B
    # A = B, given A ⊆ B and B ⊆ A

    # Transitivity
    # A ⊆ B, given A ⊆ B and B ⊆ C

    # Existence of a Least Element
    specify "∅ ⊆ A" do
      @empty.should <= @full
      @empty.should <= @empty
      @empty.should <= @single
      @empty.should <= @subset
    end

    # Existence of a Greatest Element
    specify "A ⊆ U" do
      @full.should <= @full
      @empty.should <= @full
      @single.should <= @full
      @subset.should <= @full
    end

    # Existence of Joins
    # A ⊆ A ∪ B
    # A ∪ B ⊆ C, given C ⊆ A and C ⊆ B

    # Equivalent Statements
    # A ⊆ B
    # A ∩ B = A
    # A ∪ B = B
    # A ∖ B = ∅
    # ¬B ⊆ ¬A
  end

  describe "#==(other)" do
  end

  describe "#replace(other)" do
  end

end
