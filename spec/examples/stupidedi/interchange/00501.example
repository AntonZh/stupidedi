require "spec_helper"

describe Stupidedi::Interchange::FiveOhOne do
  let(:isa)     { Stupidedi::Interchange::FiveOhOne::InterchangeHeader }
  let(:gs)      { Stupidedi::Interchange::FiveOhOne::FunctionalGroupHeader }
  let(:success) { Stupidedi::Reader::Success }

  describe "InterchangeHeader" do
    describe ".default" do
      subject { isa.default }
      it { should be_a(isa) }

      specify { subject.element_separator.should == "*" }
      specify { subject.segment_terminator.should == "~" }
      specify { subject.component_separator.should == ":" }
      specify { subject.repetition_separator.should == "^" }
    end

    describe "#reader" do
      def mkheader(function, version)
        "GS*#{function}*SENDER CODE*RECEIVER CODE*19991231*0802*1*X*#{version}~"
      end

      context "with empty input" do
        subject { isa.default.reader("") }

        it { should be_defined }

        specify { subject.map{|s| s.should be_empty }}
        specify { subject.map{|s| s.should respond_to(:read_functional_group_header) }}
        specify { subject.map{|s| s.input.should be_empty }}
      end

      context "with non-empty input" do
        subject { isa.default.reader("...") }

        it { should be_defined }

        specify { subject.map{|s| s.should_not be_empty }}
        specify { subject.map{|s| s.should respond_to(:read_functional_group_header) }}
        specify { subject.map{|s| s.input.should == "..." }}
      end

      context "after reading a valid functional group header" do
        subject { isa.default.reader(mkheader("FA", "005010X231")).flatmap{|h| h.read_functional_group_header }}

        it { should be_defined }

        specify { subject.map{|r| r.should be_a(success) }}
        specify { subject.map{|r| r.value.should be_a(gs) }}
      end
    end

    describe "input validation" do
      pending
    end
  end

  describe "FunctionalGroupHeader" do
    describe "#asc" do
      pending
    end

    describe "#reader" do
      pending
    end
  end

end
