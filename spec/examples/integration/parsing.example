require "spec_helper"

describe "Parsing" do
  include NavigationMatchers

  FIXTURE_ROOT = File.expand_path("../../../fixtures", __FILE__)

  let(:config) do
    Stupidedi::Config.new.customize do |config|
      config.interchange.customize do |c|
        c.register("00401") { Stupidedi::Versions::Interchanges::FourOhOne::InterchangeDef }
        c.register("00501") { Stupidedi::Versions::Interchanges::FiveOhOne::InterchangeDef }
      end

      config.functional_group.customize do |c|
        c.register("004010") { Stupidedi::Versions::FunctionalGroups::FortyTen::FunctionalGroupDef }
        c.register("005010") { Stupidedi::Versions::FunctionalGroups::FiftyTen::FunctionalGroupDef }
      end

      config.transaction_set.customize do |c|
        c.register("005010", "HN", "277") { Stupidedi::Versions::FunctionalGroups::FiftyTen::TransactionSetDefs::HN277 }
        c.register("005010", "HP", "835") { Stupidedi::Versions::FunctionalGroups::FiftyTen::TransactionSetDefs::HP835 }
        c.register("005010", "HC", "837") { Stupidedi::Versions::FunctionalGroups::FiftyTen::TransactionSetDefs::HC837 }
        c.register("005010", "FA", "999") { Stupidedi::Versions::FunctionalGroups::FiftyTen::TransactionSetDefs::FA999 }

        c.register("005010X214", "HN", "277", Stupidedi::Guides::FiftyTen::X214::HN277)
        c.register("005010X221", "HP", "835", Stupidedi::Guides::FiftyTen::X221::HP835)  # A1
        c.register("005010X222", "HC", "837", Stupidedi::Guides::FiftyTen::X222::HC837P) # A1
        c.register("005010X231", "FA", "999", Stupidedi::Guides::FiftyTen::X231::FA999)  # A1
      end
    end
  end

  let(:parser) { Stupidedi::Builder::StateMachine.build(config) }

  def parse(path)
    if rand > 0.5
      parser.read(Stupidedi::Reader.build(File.read(path)))
    else
      File.open(path){|io| parser.read(Stupidedi::Reader.build(io)) }
    end
  end

  context "X222-HC837" do
    let(:fixtures) { File.join(FIXTURE_ROOT, "X222-HC837") }

    it "parses 1-good.txt" do
      parser, reader = parse(File.join(fixtures, "1-good.txt"))
      
      parser.should be_deterministic
      parser.should be_last

      parser.segment.tap do |iea|
        iea.node.position.line.should   == 53
        iea.node.position.column.should == 1
      end

      parser.parent.tap do |isa|
        # Should have 49 total segments in the parse tree
        isa.distance(parser).select{|d| d + 1 == 49 }.should be_defined

        segment_ids = %w(ISA GS ST BHT NM1 PER NM1 HL PRV NM1 N3 N4 REF NM1 N3
                         N4 HL SBR NM1 N3 N4 DMG NM1 N4 REF HL PAT NM1 N3 N4 DMG
                         CLM REF HI LX SV1 DTP LX SV1 DTP LX SV1 DTP LX SV1 DTP
                         SE GE IEA).map(&:to_sym)

        # First-to-last
        state = isa
        segment_ids.each do |id|
          state.segment.map(&:node).map(&:id).
            should == Stupidedi::Either.success(id)
          state.next.tap{|s| state = s }
        end

        # Last-to-first
        isa.last.tap{|s| state = s }
        segment_ids.reverse.each do |id|
          state.segment.map(&:node).map(&:id).
            should == Stupidedi::Either.success(id)
          state.prev.tap{|s| state = s }
        end

        isa.should have_structure(
          Ss(X(:ST),
             R(:ISA), # No more ISAs
             S(:GS, "HC", nil, nil, nil, nil, 1) =>
               Ss(R(:GS), # No more GSs
                  S(:ST) =>
                    Ss(R(:ST), # No more STs
                       X(:PRV),
                       X(:NM1, "85"),
                       X(:NM1, "87"),
                       X(:SBR),
                       X(:NM1, "IL"),
                       X(:NM1, "PR"),
                       S(:BHT) =>
                         Ss(S(:NM1, "41"),
                            S(:NM1, "40"),
                            S(:HL, "1"),
                            S(:HL, "2"),
                            S(:HL, "3"),
                            S(:SE),
                            S(:GE),
                            S(:IEA)),
                       # 1000A SUBMITTER NAME
                       S(:NM1, "41") =>
                         Ss(S(:PER),
                            S(:NM1, "40"),
                            S(:HL,  "1"),
                            S(:HL,  "2"),
                            S(:HL,  "3"),
                            S(:SE),
                            S(:GE),
                            S(:IEA)),
                       # 1000B RECEIVER NAME
                       S(:NM1, "40") =>
                         Ss(S(:HL, "1"),
                            S(:HL, "2"),
                            S(:HL, "3"),
                            S(:SE),
                            S(:GE),
                            S(:IEA)),
                       # 2000A BILLING PROVIDER HIERARCHICAL LEVEL
                       S(:HL, "1") =>
                         Ss(S(:PRV) =>
                              Ss(S(:NM1, "85"),
                                 S(:NM1, "87"),
                                 S(:HL, "2"),
                                 S(:HL, "3"),
                                 S(:SE),
                                 S(:GE),
                                 S(:IEA)),
                            # 2010AA BILLING PROVIDER NAME
                            S(:NM1, "85") =>
                              Ss(S(:NM1, "87") => Ss(),
                                 S(:N3)        => Ss(S(:N4),
                                                     S(:REF, "EI"),
                                                     S(:NM1, "87")),
                                 S(:N4)        => Ss(S(:REF, "EI"),
                                                     S(:NM1, "87")),
                                 S(:REF, "EI") => Ss(S(:NM1, "87")),
                                 S(:SE)        => Ss(),
                                 S(:GE)        => Ss(),
                                 S(:IEA)       => Ss()),
                            # 2010AB PAY-TO ADDRESS NAME
                            S(:NM1, "87") =>
                              Ss(S(:N3)  => Ss(S(:N4),
                                               S(:HL, "2")),
                                 S(:N4)  => Ss(S(:HL, "2")),
                                 S(:SE)  => Ss(),
                                 S(:GE)  => Ss(),
                                 S(:IEA) => Ss()),
                            S(:HL, "2") => Ss(),
                            S(:HL, "3") => Ss(),
                            S(:SE)      => Ss(),
                            S(:GE)      => Ss(),
                            S(:IEA)     => Ss()),
                         # 2000B SUBSCRIBER HIERARCHICAL LEVEL
                         S(:HL, "2") =>
                           Ss(S(:SBR) =>
                                Ss(S(:NM1, "IL"),
                                   S(:NM1, "PR"),
                                   S(:HL, "3"),
                                   S(:SE),
                                   S(:GE),
                                   S(:IEA)),
                              # 2010BA SUBSCRIBER NAME
                              S(:NM1, "IL") =>
                                Ss(S(:N3)  => Ss(S(:N4),
                                                 S(:DMG),
                                                 S(:NM1, "PR"),
                                                 S(:HL, "3")),
                                   S(:N4)  => Ss(S(:DMG),
                                                 S(:NM1, "PR"),
                                                 S(:HL, "3")),
                                   S(:DMG) => Ss(S(:NM1, "PR"),
                                                 S(:HL, "3")),
                                   S(:SE)  => Ss(),
                                   S(:GE)  => Ss(),
                                   S(:IEA) => Ss()),
                              # 2010BB PAYER NAME
                              S(:NM1, "PR") =>
                                Ss(S(:N4) => Ss(S(:REF, "G2"),
                                                S(:HL, "3")),
                                   S(:REF, "G2") => Ss(S(:HL, "3")),
                                   S(:SE)        => Ss(),
                                   S(:GE)        => Ss(),
                                   S(:IEA)       => Ss()),
                              S(:HL, "3") => Ss(),
                              S(:SE)      => Ss(),
                              S(:GE)      => Ss(),
                              S(:IEA)     => Ss()),
                         # 2000C PATIENT HIERARCHICAL LEVEL
                         S(:HL, "3") =>
                           Ss(S(:PAT) => Ss(S(:NM1, "QC"),
                                            S(:CLM),
                                            S(:SE),
                                            S(:GE),
                                            S(:IEA)),
                              # 2010CA PATIENT NAME
                              S(:NM1, "QC") =>
                                Ss(S(:N3)  => Ss(S(:N4),
                                                 S(:DMG),
                                                 S(:CLM)),
                                   S(:N4)  => Ss(S(:DMG),
                                                 S(:CLM)),
                                   S(:DMG) => Ss(S(:CLM)),
                                   S(:CLM) => Ss(),
                                   S(:SE)  => Ss(),
                                   S(:GE)  => Ss(),
                                   S(:IEA) => Ss()),
                              # 2300 CLAIM INFORMATION
                              S(:CLM) =>
                                Ss(R(:CLM), # No more CLMs
                                   S(:REF, "D9"),
                                   S(:HI, C("BK", "0340"), C("BF", "V7389")),
                                   # 2400 SERVICE LINE NUMBER
                                   S(:LX, "1") =>
                                     Ss(R(:LX, "1"), # No more LX*1's
                                        S(:LX, "2"),
                                        S(:LX, "3"),
                                        S(:LX, "4"),
                                        S(:SV1, C(nil, "99213")) => Ss(S(:DTP, "472"),
                                                                       S(:LX, "2"),
                                                                       S(:LX, "3"),
                                                                       S(:LX, "4"),
                                                                       S(:SE),
                                                                       S(:GE),
                                                                       S(:IEA)),
                                        S(:DTP, "472") => Ss(S(:LX, "2"),
                                                             S(:LX, "3"),
                                                             S(:LX, "4"),
                                                             S(:SE),
                                                             S(:GE),
                                                             S(:IEA))),
                                   # 2400 SERVICE LINE NUMBER
                                   S(:LX, "2") =>
                                     Ss(R(:LX, "1"),
                                        R(:LX, "2"), # No more LX*2's
                                        S(:LX, "3"),
                                        S(:LX, "4"),
                                        S(:SV1, C(nil, "87070")) => Ss(S(:DTP, "472"),
                                                                       S(:LX, "3"),
                                                                       S(:LX, "4"),
                                                                       S(:SE),
                                                                       S(:GE),
                                                                       S(:IEA)),
                                        S(:DTP, "472") => Ss(S(:LX, "3"),
                                                             S(:LX, "4"),
                                                             S(:SE),
                                                             S(:GE),
                                                             S(:IEA))),
                                   # 2400 SERVICE LINE NUMBER
                                   S(:LX, "3") =>
                                     Ss(R(:LX, "1"), # No more LX*1's
                                        R(:LX, "2"), # No more LX*2's
                                        R(:LX, "3"), # No more LX*3's
                                        S(:LX, "4"),
                                        S(:SV1, C(nil, "99214")) => Ss(S(:DTP, "472"),
                                                                       S(:LX, "4"),
                                                                       S(:SE),
                                                                       S(:GE),
                                                                       S(:IEA)),
                                        S(:DTP, "472") => Ss(S(:LX, "4"),
                                                             S(:SE),
                                                             S(:GE),
                                                             S(:IEA))),
                                   # 2400 SERVICE LINE NUMBER
                                   S(:LX, "4") =>
                                     Ss(R(:LX, "1"),
                                        R(:LX, "2"),
                                        R(:LX, "3"),
                                        R(:LX, "4"),
                                        S(:SV1, C(nil, "86663")) => Ss(S(:DTP, "472"),
                                                                       S(:SE),
                                                                       S(:GE),
                                                                       S(:IEA)),
                                        S(:DTP, "472") => Ss(S(:SE),
                                                             S(:GE),
                                                             S(:IEA))))),
                       S(:SE) => Ss(S(:GE),
                                    S(:IEA))),
                  S(:GE)  => Ss(S(:IEA)),
                  S(:IEA) => Ss())))
      end
    end

    it "parses 1-bad.txt"

    it "parses 3a-good.txt"
    it "parses 3a-bad.txt"

    it "parses 3b-good.txt"
    it "parses 3b-bad.txt"

    it "parses 3c-good.txt"
    it "parses 3c-bad.txt"

    it "parses 4-good.txt"
    it "parses 4-bad.txt"

    it "parses 5-good.txt"
    it "parses 5-bad.txt"

    it "parses 6-good.txt"
    it "parses 6-bad.txt"
    
    it "parses 7-good.txt"
    it "parses 7-bad.txt"

    it "parses 8-good.txt"
    it "parses 8-bad.txt"

    it "parses 9-good.txt"
    it "parses 9-bad.txt"

    it "parses 10a-good.txt"
    it "parses 10a-bad.txt"

    it "parses 10b-good.txt"
    it "parses 10b-bad.txt"

    it "parses 10c-good.txt"
    it "parses 10c-bad.txt"
  end

end
