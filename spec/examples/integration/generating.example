require "spec_helper"

describe "Generating" do
  include NavigationMatchers

  let(:config) do
    Stupidedi::Config.new.customize do |config|
      config.interchange.customize do |c|
        c.register("00401") { Stupidedi::Versions::Interchanges::FourOhOne::InterchangeDef }
        c.register("00501") { Stupidedi::Versions::Interchanges::FiveOhOne::InterchangeDef }
      end

      config.functional_group.customize do |c|
        c.register("004010") { Stupidedi::Versions::FunctionalGroups::FortyTen::FunctionalGroupDef }
        c.register("005010") { Stupidedi::Versions::FunctionalGroups::FiftyTen::FunctionalGroupDef }
      end

      config.transaction_set.customize do |c|
        c.register("005010", "HN", "277") { Stupidedi::Versions::FunctionalGroups::FiftyTen::TransactionSetDefs::HN277 }
        c.register("005010", "HP", "835") { Stupidedi::Versions::FunctionalGroups::FiftyTen::TransactionSetDefs::HP835 }
        c.register("005010", "HC", "837") { Stupidedi::Versions::FunctionalGroups::FiftyTen::TransactionSetDefs::HC837 }
        c.register("005010", "FA", "999") { Stupidedi::Versions::FunctionalGroups::FiftyTen::TransactionSetDefs::FA999 }

        c.register("005010X214", "HN", "277", Stupidedi::Guides::FiftyTen::X214::HN277)
        c.register("005010X221", "HP", "835", Stupidedi::Guides::FiftyTen::X221::HP835)  # A1
        c.register("005010X222", "HC", "837", Stupidedi::Guides::FiftyTen::X222::HC837P) # A1
        c.register("005010X231", "FA", "999", Stupidedi::Guides::FiftyTen::X231::FA999)  # A1
      end
    end
  end

  let(:strict)  { Stupidedi::Builder::BuilderDsl.build(config, true)  }
  let(:lazy)    { Stupidedi::Builder::BuilderDsl.build(config, false) }

  context "unrecognized interchange version" do
    context "when strict" do
      it "quietly proceeds" do
        # 0050x isn't configured
        lazy.ISA("00", "",
                 "00", "",
                 "ZZ", "",
                 "ZZ", "",
                 Time.now.utc,
                 Time.now.utc,
                 "", "0050x", 123456789, "1", "T", "")

        # An invalid ISA segment was added
        lazy.zipper.select{|z| z.node.invalid? }.should be_defined

        # It's parent is an InvalidEnvelopeVal
        lazy.zipper.select{|z| z.parent.node.invalid? }.should be_defined
      end
    end

    context "when non-strict" do
      it "loudly complains" do
        lambda do
          strict.ISA("00", "",
                     "00", "",
                     "ZZ", "",
                     "ZZ", "",
                     Time.now.utc,
                     Time.now.utc,
                     "", "0050x", 123456789, "1", "T", "")
        end.should raise_error("invalid segment ISA")

        # The ISA segment wasn't added
        lazy.zipper.select(&:root?).should be_defined
      end
    end
  end

  context "interchange 00501" do
  end

  context "interchange 00401" do
  end
end
