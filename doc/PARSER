
  One way to iterate the contents of an EDI document is to view it as a sequence, and provide
  a cursor/iterator like interface

    val it: Iterator[Segment] = document.segmentIterator

    while (it.hasNext) {
      val segment = it.next

      segment.areaDefinition:     AreaDefinition
      segment.loopDefinition:     LoopDefinition
      segment.segmentDefinition:  SegmentDefinition

      segment.areaDefinition match {
        case HeaderArea =>
          segment.definition match {
            case s: ISA =>
              segment.element(0).definition:  ElementDefinition
              segment.element(0).value:       String

              // ideally we would use better named attributes
              s.element(ISA.E01)

              /**
               * this works too, but it won't always work because
               * the same element definition can be used more than
               * once in a single segment. the name isn't unique
               */
              s.authorizationInformationQualifier
            case GS =>
              segment.element(0).definition
            ...
          }
        case DetailArea =>
          segment.loopDefinition match {
            ...
          }
        ...
      }

      // end of iteration
    }

  This could be refined to have different iterator types,
    val it: Iterator[Area]    = document.areaIterator
    val it: Iterator[Loop]    = document.loopIterator
    val it: Iterator[Segment] = document.segmentIterator

