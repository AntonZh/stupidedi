TODO
-------------------------------------------------------------------------------

Implement an automated FA999 Functional Acknowledgement generator that accepts
any FunctionalGroupVal as input. This will be useful for writing integration
tests, but more importantly it will create use cases that will require changes
to Reader and Builder to gracefully handle more unhappy-paths.

Change Builder to start from an empty Envelope::TransactionSet (ST/SE), so the
outer envelopes can be constructed independently. This will require some smarts
to detect when the TransactionSetDef might use repetition separators because not
all InterchangeDefs have support for it.

Fix the error handling with Reader::TokenReader so StateMachine can know when
reading a segment failed due to EOF at an expected or unexpected boundary.

Evaluate implementation guide conformance regarding ElementReq and SyntaxNote.
This requires interpreting the meaning of SyntaxNote, so its necessarily version
specific.

Update GuideBuilder to ensure SegmentReq, ElementReq, and RepeatCount are only
restricted by the implementation guide and not made less restrictive.

It might be most sensible to change AbstractState to accept already-built
SegmentVals from the programmatic API in addition to SegmentToks from the
Reader::TokenReader. This would reduce wasteful object creation.

DONE
-------------------------------------------------------------------------------

Improve the tree traversal API. This is hard to conceive, but perhaps working on
the Editor code will reveal the key problems. Perhaps something like zipper that
can use qualifier values to search for specific instances of SegmentUse

Create a new AbstractState that bypasses the parse tree. This will be useful
when we want to skip an entire transaction, functional group, or interchange.

Design the error handling more carefully. Currently constructors for subclasses
of SimpleElementVal raise exceptions for badly formatted input, which will blow
up the parser -- this is fine for programmatic X12 generation but not when we're
reading a file.

Code lookup values in pretty printer output. This will force a design choice on
where the CodeConfig is bound -- globally, to the parse tree, or parameterized?

Fix the StateMachine's handling of Reader. When ISE is read, the TokenReader
should be "downcast" to StreamReader. Otherwise we don't correctly skip non-X12
data from the input stream between interchanges.

Colorized pretty printer output. Definitions and meta-data should be separately
colored (to blend in with the background), element values should stand out, and
invalid elements should stand out most

Implement Builder::FailureState -- the "non-clean" 835 sample files are tripping
the error handling in one of the AbstractState.push methods.

Change Builder::StateMachine#input! to either require a reader or correctly deal
with having a nil reader. Currently the InterchangeState.push constructior blows
up because it tries to merge reader.separators

Programmatic API for Builder that constructs SegmentTok and friends with stack
frames for the input position. Requires creating a new Reader::Position class
because constructing a Reader::Input to encode the position is yucky.

Implement the destructive update methods for both AbstractState subclasses and
for Values/Envelope data types. Need to evaluate when both can be called, when
only the AbstractState can be modified destructively, etc.
